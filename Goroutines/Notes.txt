Q1. What is a Channel?
Channel provides a way to communicate between concurrently executing functions by sending and 
recieving value of a specified type.
Value of an uninitialized channel is nil.
Uses FIFO , first value that enter in channel will be removed first


Channel Type Declaration:
1. Send-only channels: In these channels you can only send the data.
ch:= make(chan <- string)
2. Recieve-only channels: We can only recieve from these channels.
ch:=make(<-chan string)


Types of Channels
1. Buffered Channel: They have a capacity and and allows specified no. of elements to be queued before blocking.
ch:=make(chan int, 3)
2. Non-Buffered Channel: They do not have any capacity & blocks until both sender and reciever are ready .
ch:=make(chan int)


Close Channel

1. We can't send value to a closed channel
2. We can recieve from a closed channel

Race Conditions: Race condition occurs when multiple goroutines tries to access same data variable .
For e.g : one is reading the value and other is writing so sometimes the expected value will be different
from the value we got.

To check race condition is there or not use commmand:
go run -race main.go

How to remove Race Conditions ?
1. Mutex

var mutex= sync.Mutex{}

How does Mutex works?
Mutex is created in an unlocked state.
When the first call to mutex.Lock() is made, mutex state changes to Locked.
Any other calls to mutex.Lock() will block the goroutine until mutex.Unlock() is called
So, only one thread can access the critical section.

RWMutex: This allows multiple readers to read the value but  if the writer tries to access 
the value then all readers will be blocked
